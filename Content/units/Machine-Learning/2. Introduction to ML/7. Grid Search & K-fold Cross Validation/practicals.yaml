- description: |+
    1. Load the `diabetes` dataset from `sklearn.datasets`. 
    2. Generate a train-test split of the data.
    3. Import the `GradientBoostingRegressor` class from `sklearn.ensemble`.
    4. Import the `uniform` and `randint` functions from `scipy.stats`. These can be used to generate random integers and floats respectively.
    4. Initialise an instance of the `GradientBoostingRegressor` class, and assign random values to the parameters `learning rate` (random float), `subsample` (random float), `n_estimators` (int between 100 and 1000), `max_depth` (int between 4 and 10).
    5. Import `RandomizedSearchCV`` from sklearn and use it to estimate the best hyperparameters for the module.
    6. Run the model on the training set, and evaluate it on the test set. 
    7. Now repeat the process using grid search.  Using the `time()` function from the `time` python module you can see how long each takes.
    8. Which is the fastest? Which is the most accurate?

  id: 92eb4685-2026-4fe2-8807-2b84db004e8b
  name: Implement Grid Search and K-Fold Cross Validation on a Linear Regression Model


- description:  |+ 
    1. Use a dataset of your choice and use Grid Search and K-Fold Cross Validation to compare the performance of the following models - Logistic Regression, Support Vector Machines, Random Forests.

  id: 131d75e5-8eba-447a-9e4d-88892ab2d042
  name: Compare the Performance of Different Models 

