- id: 70bbb8fb-a9f1-4444-aa9e-ea35c0f69da1
  name: Counting Numbers
  description: |
    Write a program that prints the numbers from 1 to 50.

    1. Use a `while` loop to do so
    2. Use a `for` loop to do so

    What differences do you notice between the two ways?

- id: b5ffca84-a067-4dc6-982c-a847c18dc953
  name: Counting even Numbers
  description: |
    Write a program that prints the numbers from 1 to 50 only if the number is even.

    1. Use a `while` loop to do so
    2. Use a `for` loop to do so

- id: f8e314e5-d234-467f-bccb-bd6a8d7eda34
  name: Counting even and Odd Numbers
  description: |+
    1. Write a `for` loop to count the sum of all even numbers between 1 and 100
    2. Write another `for` loop to count the sum of all odd numbers between 1 and 100


- id: 84dbbf46-a646-4a18-9c89-57867171ea5c
  name: FizzBuzz
  description: |
    Write a program that prints the numbers from 1 to 100.

    - For multiples of three print "Fizz" instead of the number
    - For multiples of five print "Buzz"
    - For numbers which are multiples of both three and five print "FizzBuzz"

    Be careful with the order of the conditions. Remember that the condition that is first met will be the one that will run, and the rest will be ignored.

- id: 11a45beb-e4ad-4f16-be70-c355c7897947
  name: Rock-Paper-Scissors with Rounds
  description: |
    Write a program that checks which player wins three rounds of Rock Paper Scissors.

    Download the next [file](https://aicoreassessments.s3.amazonaws.com/simple_rps.py).

    The program asks two inputs from the user: `player1` and `player2`. The inputs can be either 'rock', 'paper' or 'scissors'.

    1. Code the logic of the game to see who wins. Print the result in the format: "Player 1 wins" or "Player 2 wins"
    2. If one of the inputs is not "rock", "paper" or "scissors", print "Invalid input"
    3. If both inputs are the same, print "It's a tie"
    4. Create two new variables, `num_player_one_wins` and `num_player_two_wins`, and use them to keep track of the number of wins each player has
    5. Put the code inside a `while` loop that runs until one of the players has won three rounds

- id: 2466a517-41ac-42b3-9b14-d9cd29585a69
  name: Budget Calculator
  description: |+
    Write a program that calculates the total cost of a shopping trip.

    Download this [file]](https://aicoreassessments.s3.amazonaws.com/budget_calculator.py).

    The file contains five variables:
      - `order_list`: A list with tuples, where each tuple contains the code, the individual price and the quantity of each item in the order
      - `names`: A dictionary with the names of the items, where the key is the code of the item
      - `budget`: The budget of the customer
      - `running_total`: The total cost of the order so far
      - `receipt`: A list with the items in the order

    1. Use a `for` loop to iterate through the `order_list`
    2. At each iteration:
      - Add the items to the `receipt` list
      - Add the total cost of the item to the `running_total` variable
      - Subtract the total cost of the item from the `budget` variable
    3. If at some point the `budget` variable is less than 0, print the message "You have exceeded your budget by {budget}." and break the loop

- id: 53cc4a0d-5f50-44e0-b3d2-e945a98a9904
  name: Odd and even List Comprehension
  description: |+
    1. Create a list comprehension that squares even arguments, and squares odd arguments after adding one to them
    2. Test it on the following list
      `my_list = [1, 5, 8, 6, 21]`

    The output should be:

    `[4, 36, 64, 36, 484]`

- id: 11892e20-3591-42fa-8138-b8b3fb250617
  name: Dictionaries and List Comprehensions
  description: |+
    1. Create two dictionaries, each one with 2 keys
      - `name`: a string of your name
      - `skills`: a list of strings
    2. Put both of them in a list
    3. Now index that list of dictionaries to find the last letter of the first skill of the last dictionary
    4. Create a list comprehension which maps that list to a list of the length of names
    5. Add that list together to get the total number of characters in all of the names

- id: 141a7153-265f-438d-8329-65b0ba4df097
  name: Shop Item Filter
  description: |+
    1. Filter `shop_dict` using list comprehension to find only items with values of over 1.00
    2. Assign them to a list called `filtered_shop` by their full names, not their codes, using `names_dict`.

    `shop_dict = {"tom":0.87, "sug":1.09, "ws":0.29, "cc":1.89, "ccz":1.29}`

    `names_dict = {"tom":"Tomatoes", "sug":"Sugar", "ws":"Washing Sponges", "cc":"Coca-Cola", "ccz":"Coca-Cola Zero"}`

- id: b0831c4a-57a1-4c3a-9349-7fcbba974225
  name: Shape Maker
  description: |+

    1. Write a program to produce the following pattern.

      Here's a clue: Use nested for loops, using one nested loop to increase in size and another to decrease.*

    2. Start with n=5

    Example:

    ?

    ? ?

    ? ? ?

    ? ? ? ?

    ? ? ? ? ?

    ? ? ? ?

    ? ? ?

    ? ?

    ?

- id: 67cb68ea-4505-4cd6-8b71-8cb621c2525e
  name: Prime Numbers
  description: |+
    1. Write a program to check whether each number from 10 to 50 is prime

    2. Your answer should take the following format:
      - "x is a prime number." for primes
      - "x is not a prime number because y is a factor of x." for non-primes

    Here's a clue: This is possible using a while loop nested in a for loop or using a nested for loop; if you can, try to find both.*
