- id: b9e60720-627c-4dee-a8ef-9989fd51703e
  name: Void Functions
  description: |+
    A function that doesn't return anything is called a void function. In Python, you can define a void function by simply not including a return statement.

    1. Create a function called `void_function` that doesn't return anything
    2. Inside the function, print the string `"This is a void function."`
    3. Call the function and assign the result to a variable called `void_result`
    4. Print the value of `void_result`

    What is the value of `void_result`? Why?

    Notice that even though the function doesn't return anything, it still prints the string `"This is a void function."` to the console.
    This is because the `print` function still runs inside the function, even though the function doesn't return anything.

    This is important to remember, sometimes you want your functions to perform actions without returning anything.


- id: a893b38a-c160-4c47-b1fc-0a4602642639
  name: Range Checker
  description: |+
    1. Write a function called `in_range` which takes in three arguments: `lower_bound`, `upper_bound`, and `number`
    2. If `number` is between `lower_bound` and `upper_bound`, print "{`number`} is between {`lower_bound`} and {`upper_bound`}." 
    3. If it isn't, print "{`number`} is NOT between {`lower_bound`} and {`upper_bound`}." 
    4. Call your function to test it


- id: 7dde34f0-1275-42ff-90e5-0032a42b557d
  name: Boolean Range Checker
  description: |+
    1. Write a function called `in_range` which takes in three arguments: `lower_bound`, `upper_bound`, and `number`
    2. If `number` is between `lower_bound` and `upper_bound`, return `True`
    3. If it isn't, return `False`
    4. Call your function to test it

- id: b42b8c0d-bb7a-41d4-ac51-ac926276fa72
  name: Return a Unique Item List
  description: |+
    1. Write a function called `unique_list` that takes in a list and returns a list with only the unique elements of the input.

    `my_list = [1, 3, 5, 6, 4, 3, 2, 3, 3, 4, 3, 4, 5, 6, 6, 4, 3, 2, 12, 3, 5, 63, 4, 5, 3, 3, 2]`

    2. Find another way of performing the same operation without defining a function.

- id: 46c69857-5d73-4c48-a72f-8aec995bf871
  name: Volume of a Sphere
  description: |+
    1. Write a function called `volume_of_sphere` that takes in a variable called `radius` which is the radius of a sphere
    2. The function calculates the volume of a sphere. Search online for the formula for calculating the volumne and use `PI = 3.14`
    3. The function should return the volume of the sphere rounded to 2 decimal points
    2. Call your function to test it

- id: f475a5c2-d902-4ec6-9323-6486e3efb6f6
  name: Come up with Your Own Functions Practical
  description: |+
    Write a challenge for your team, send it into slack in the #practicals channel, and then do one of the challenges you find there.

- id: 502573c9-1415-4956-9379-fcf0ae8bb1a2
  name: Default Arguments
  description: |+
    1. Create a function which takes in a dictionary of attributes about a piece of clothing and prints each of the key-value pairs on a line
    2. Define a function parameter called `attributes_to_print` with a default argument of 'all'
    3. If a list is passed into the function as the `attributes_to_print`, print only the key-value pairs of the dictionary where the key exists in `attributes_to_print`. Otherwise, print them all.
    4. Print a message to tell the user if a key doesn't exist
    5. Call your function to test it

- id: bb24e593-3ffb-4c13-a795-cc4cb79ec4db
  name: Profile Validation
  description: |+
    1. Create a function which takes in the `name`, `age`, and `email` of a user trying to create a new profile on our application
    2. Check the name does not contain any of the following characters "!@Â£$%^&*()"
    3. Check the email is valid by making sure it contains "@"
    4. Check the `age` > 12
    5. Turn each step above into a function, so that you have one function, whiich calls 3 other functions inside
    6. Print a friendly error to explain the issue to the user if any of these checks does not pass

- id: e46976d3-d4e0-41d7-b08a-bbf5b1a459db
  name: Factorial Function
  description: |+
    A recursive function is a function that calls itself. This is useful when you want to perform an operation on a number and all the numbers below it.

    Define a recursive function called `factorial` that returns the factorial of a given number.

    1. Define a function called `factorial` that takes in a number
    2. If the number is 0, return 1
    3. Otherwise, return the number multiplied by the factorial of the number minus 1. In this case, you have to call the function again inside itself.
    4. Call your function to test it. Use the number 5 as an input, you should get 120 as an output.

- id: 8ee2081b-9ceb-47e8-83c0-a9e51b8450cd
  name: Recursive Fibonnaci Function
  description: |+
    Create a function which takes in an integer `n`, and when called, returns a list of the first `n` Fibonnaci numbers.

    It should be a recursive function which calls itself inside the function body.

- id: 8b4c6ba3-8b66-4524-b243-a556a60a9ab2
  name: Fibonnaci Loop
  description: |+
    1. Write a `for` loop that prints the first 100 Fibonnaci numbers
    2. Create a function which returns `True` if the number is a multiple of 7 and `False` otherwise
    3. Call this function on each number inside your loop
    4. Add an `elif` condition to the loop to call another new function which checks if the number is greater than or equal to 100 OR is less than 50. In the case that it is `True`, format a string that prints the number and either "is larger than 100" or "is less than 50".


- id: 6a97166b-cfff-4f6f-b215-00ef73233547
  name: Inverse
  description: |+
    Define a recursive function called `inverse` that returns the inverse of a string, where the start and end characters appear at the middle of the word


- id: 95c8dcce-c456-490f-8fde-9868bdee6dfd
  name: Palindrome?
  description: |+
    A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward. This includes capital letters, punctuation, and other special characters.

    1. Write a function that takes in a string and returns `True` if it is a palindrome and `False` otherwise
    2. Write a function that takes in a string and returns `True` if it is a palindrome and `False` otherwise. This time, ignore capitalisation and punctuation.

    There are several ways to implement this. Some require less code, but some are more efficient; which is yours, and can you think of how to implement the other way?
