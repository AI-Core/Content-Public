- id: c6de4fa0-bdf6-417d-844f-8727e1dffd59
  name: BMI Checker
  description: |+
    Given 2 variables, `height` and `weight`, calculate the BMI (`weight` / `height` ^2).

    1. Using the parameter BMI, write a series of if statements that print the following outcomes:
    
      - Below 18.5 --> "Your BMI is x. You're in the underweight range."
      - Between 18.5 and 24.9 --> "Your BMI is x. You're in the healthy weight range."
      - Between 25 and 29.9 --> "Your BMI is x. You're in the overweight range."
      - Between 30 and 39.9 --> "Your BMI is x. You're in the obese range."
    

    2. Test your code with the following cases by substituting them in for weight and height values in your code:

      - Height: 1.83m, Weight: 85kg
      - Height: 1.55m, Weight: 61kg
      - Height: 2.09m, Weight: 135kg

- id: 93dc24af-59bb-4483-8811-cfcc1ac5904b
  name: Flight Safety Checker
  description: |+
    Given 2 variables, `altitude` (ft) and `airspeed` (knots)

    1. Write a program that categorises entries into 'safe flying' and 'unsafe flying' based on the following criteria:

      - An `altitude` below 100ft or above 50000ft is considered unsafe flying
      - An `airspeed` below 60 knots or above 500 knots is considered unsafe flying
      - If `altitude` and `airspeed` are outside these ranges, the flight is considered as safe

    *CLUE: You will have to figure out the syntax for using `and`/`or` keywords in `if` statements*

    2. Try to write this as cleanly as possible and test your code with the following by substituting in again:

      - Altitude: 25000ft, Airspeed: 300 knots
      - Altitude: 50001ft, Airspeed: 250 knots
      - Altitude: 90ft, Airspeed: 125 knots

- id: e0ef4463-6a6a-4c0c-9448-0b9889fceaad
  name: Order of Conditions
  description: |
    Download the next [file](https://aicoreassessments.s3.amazonaws.com/order_conditions.py).

    1. Run the code and enter 5 as the input. What is the output?
    2. Run the code again and enter 20 as the input. What is the output?
    3. Run the code again and enter 50 as the input. What is the output?

    Notice that for all three inputs, you received the same output, why is this?

    4. Change the order of the conditions so that the correct output is printed for each input

- id: 687434dd-0cfa-4764-8158-d2fcfec094dc
  name: Unique Elements in a List
  description: |
    Given a list named `my_list`, write a program that checks if all the elements in the list are unique.

    If the elements are unique, print 'All elements are unique'. If there are duplicate elements, print 'There are duplicate elements'.

- id: ca106cab-e46e-419f-85c5-72ea0ba9e2c5
  name: Simple Rock-Paper-Scissors
  description: |
    Write a program that checks which player wins a game of Rock Paper Scissors.

    Download the next [file](https://aicoreassessments.s3.amazonaws.com/simple_rps.py).

    The program asks two inputs from the user: `player1` and `player2`. The inputs can be either 'rock', 'paper' or 'scissors'.

    1. Code the logic of the game to see who wins. Print the result like: 'Player 1 wins' or 'Player 2 wins'
    2. If one of the inputs is not 'rock', 'paper' or 'scissors', print 'Invalid input'
    3. If both inputs are the same, print "It's a tie"

    Test your code with the following inputs:
    - Player 1: scissors, Player 2: paper (This should print 'Player 1 wins')
    - Player 1: scissors, Player 2: rock (This should print 'Player 2 wins')
    - Player 1: paper, Player 2: paper (This should print 'It's a tie')
    - Player 1: rock, Player 2: lizzard (This should print 'Invalid input')
