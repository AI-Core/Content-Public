- id: 5fe644aa-5562-43c5-a59c-ae2f0af68b93
  name: Import Local Modules
  description: |+
    Download the following [zip](https://aicore-files.s3.amazonaws.com/import_local.zip) file and extract it to your working directory.

    Inside the `import_local` folder, you will find four files and a folder called `package_1`.

    1. In `main.py`, import function_1 from `module_1` and call it. Test it works by running `python main.py` in the terminal. You should see the message "This is function 1 in module 1"
    2. Import function_2 from `module_1` and call it. Test it works by running `python main.py` in the terminal. You should see the message "This is function 2 in module 1"
    3. Now, import function_1 from `module_2` and call it. Test it works by running `python main.py` in the terminal. You should see the message "This is function 1 in module 2"

    Notice that you imported `function_1` twice. Which one got called when you ran `python main.py`? Why?

- id: 8f9b0e85-9d24-4053-a515-b54d4cb9f775
  name: Import Modules from Packages
  description: |+
    Download the following [zip](https://aicore-files.s3.amazonaws.com/import_local.zip) file and extract it to your working directory.

    1. In `main.py`, import function_package() from `package_1.module_1` and call it. Test it works by running `python main.py` in the terminal. You should see the message "I am in function_package() in package_1/module_1.py"
    
    Notice that you can import modules that are inside a package, just like you can import modules that are in the same folder as your main file. This makes it easier to organise your code into different files and folders.

- id: dbc3a9f7-a407-44cc-91bf-b0145dff3d79
  name: Import Variables from Modules
  description: |+
    Download the following [zip](https://aicore-files.s3.amazonaws.com/import_local.zip) file and extract it to your working directory.

    Open `module_2.py`. Check that there is a variable called `x` in the file. This variable is not inside a function, so it is a global variable and you can access it from any other file.

    1. In `main.py`, import `x` from `module_2` and print it. Test that it works by running `python main.py` in the terminal. You should see the message 'Hello, I am in module 2'
    2. Now, in `main.py`, create another variable called `x` and assign it the value "Hello, I am in main.py". Then, print `x`. Test that it works by running `python main.py` in the terminal. You should see the message "Hello, I am in main.py"

    Notice that the value of `x` has changed now. This is because you overwrote the value of `x` when running `main.py`.

- id: 9bea2bee-7d94-43ee-8b76-3174f291bcef
  name: Making Changes to Modules
  description: |+
    Download the following [zip](https://aicore-files.s3.amazonaws.com/import_local.zip) file and extract it to your working directory.
    
    When you change the code in a module, those changes will be effective in all the files that import that module. However, if you are using a notebook, you will need to restart the kernel to see the changes.

    1. Open `main_notebook.ipynb` and from `module_1`, import `function_1` and call it. Test it works by running the cell. You should see the message "This is function 1 in module 1"
    2. Now, open `module_1.py` and change the message to "This is function 1 in module 1. I have been changed!". Then, run the cell in `main_notebook.ipynb` again. You should see the message "This is function 1 in module 1"

    The message is the same as before, even though you changed it in `module_1.py`. This is because you imported `function_1` before you made the change. If you want to see the changes, you will need to restart the kernel and run the cell again.

    3. Go back to `main_notebook.ipynb` and restart the kernel. 
    4. Run the cell again. You should see the message "This is function 1 in module 1. I have been changed!"

- id: 556ccf02-d77c-427b-8f79-824199f276f7
  name: Importing 3rd Party Packages
  description: |+
    Create a new file called `third_party.py`.

    1. In `third_party.py`, import `pandas`
    2. You might see an error message saying that `pandas` is not installed. If you do, run `pip install pandas` in the terminal. If you don't see an error message, skip this step.
    3. Packages are usually imported with an alias. Import `pandas` as `pd` and print the version of `pandas` that you have installed. You can find the version of `pandas` by running `pd.__version__` in the terminal.

- id: f53b2924-e2fd-48d2-8c87-e81917b620a4
  name: Giving Aliases to Modules
  description: |+
    There are many 3rd party packages that share the same name for their modules. 
    For example, `datetime` has a class called `time`, and there is another package called `time` that has a module called `time`.

    1. Create a new file called `alias.py`
    2. In `alias.py`, import `time` and call `time.time()`. You should see the current timestamp printed, something like "1661958068.7087212"
    3. Now, from `datetime`, import `time` and call `time.time()`. You should see an error like: "AttributeError: type object 'datetime.time' has no attribute 'time'"
    4. Instead of calling `time.time()`, call `time()`. You should see a time printed, in this case "00:00:00"
    
    This is because both `time` calls are trying to call different functions with the same name. The first time you were calling `time.time()`, which is a function that returns the current timestamp. The second time you were calling the `time()` class, which returns an object with the time you specified.
    If you want to tell them apart, you can give them aliases.

    5. From `datetime`, import `time` as `datetime_time` and call `datetime_time()`. You should see a time printed, in this case "00:00:00"
    6. From `time`, import `time` as `time_time` and call `time_time()`. You should see the current timestamp printed, something like "1661958068.7087212"

- id: d20a82fa-1b08-4910-a8e2-5cd833b0091b
  name: Create a Text File Using Context Managers
  description: |+
    1. Create a new file called `context_manager.py`
    2. In `context_manager.py`, create a context manager that opens a file called `test.txt` in write mode and writes the message "Hello, I am a context manager!" to the file.
    3. You should see the message "Hello, I am a context manager!" in the file `test.txt`

    If you don't close the file, you might not be able to open it again!

    You can also read the file using context managers.

    4. In `context_manager.py`, create a context manager that opens the file `test.txt` in read mode and prints the contents of the file
    5. Test that it works by running `python context_manager.py` in the terminal.
    6. You should see the message "Hello, I am a context manager!" printed in the terminal

- id: d714acce-9251-44d8-9d69-e640ccbcb0dd
  name: Creating Pickle Files
  description: |+
    Pickle files are a convenient way to store Python objects. You can read more about them [here](https://docs.python.org/3/library/pickle.html).

    Create a script that stores a dictionary in a pickle file and then read it back into Python.

    1. Create a new file called `pickle_dict.py`
    2. In `pickle_dict.py`, import `pickle`
    3. Create a dictionary called `my_dict` with the keys `a`, `b`, and `c` and the values `1`, `2`, and `3`
    4. Create a context manager that opens a file called `my_dict.pkl` in write mode and writes `my_dict` to the file.
    5. You should see a file called `my_dict.pkl` in your directory. If you try to open it, you will see a bunch of gibberish. This is because it is a pickle file and not a text file.

    You can read the contents of the pickle file back into Python.

    6. Create a new file called `read_pickle_dict.py`
    7. In `read_pickle_dict.py`, import `pickle`
    8. Create a context manager that opens the file `my_dict.pkl` in read mode and reads the contents of the file into a variable called `my_dict`
    9. Print `my_dict`. You should see the dictionary printed.

