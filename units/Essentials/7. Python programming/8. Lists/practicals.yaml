- id: b2d5d233-0c3a-482d-8d4f-31ac6ac99240
  name: Username List
  description: |+
    1. Create a list of usernames, and name it `usernames`.
    2. Print the type of `usernames`
    3. Print the length of `usernames`
    4. Print the type of the first item in `usernames`
    5. Find the length of the last name in `usernames`

- id: 08237562-408c-4d29-853f-37db2f44d490
  name: Letter Checker and String Reverse
  description: |+
    1. Write a program that checks if the two words in the following strings start with the same letter.
      - `phrase1 = 'Clean Couch'`
      - `phrase2 = 'Giant Table'`

    2. Write a program that returns the following strings with the words reversed (Not the characters).
      - `my_string1 = 'This is a short phrase'`
      - `my_string2 = 'This is actually a significantly longer phrase than the previous one'`

- id: 27a4d374-5ed2-4e14-a54d-7879335e44b8
  name: List Elements
  description: |+
    1. Create a list of five elements with a different data type. Name it `list_1`
    2. Now create a list with ten zeros, do it using the '*' operator. Name it `list_2`
    3. Nest `list_1` and `list_2` into a new list and name it `list_3`. So `list_3` should look like this `[list_1, list2]`
    4. Access the fourth element of each `list_1` and `list_2` and store the elements in `list_4`. So `list_4` should look like this `[fourth element of list_1, fourth element of list_2]`

- id: 2d29d116-7a6e-4acb-bbe2-f44ff09d1103
  name: Car Number Plate Year
  description: |+
    Given the following list of number plates: `["G06 WTR", "WL11 WFL", "QW68 PQR"]`
    1. Extract the last two characters of the first word, which represent the year of the car
    2. Print the type of each of them
    3. Convert each of these years to an integer type

- id: 6463030e-09db-4fb5-80fb-c4c78719d6df
  name: Name Character Intersection
  description: |+
    1. Create two variables: `name_1` and `name_2`
    2. Find the characters that appear in both names

- id: ba517322-2d55-41b5-a889-e499ef3e2c72
  name: Multiplying List Elements
  description: |+
    1. Create a list with ten zeros, do it using the '*' operator. Name it `list_1`
    2. Create a set from `list_1` and print its length.

- id: 2752580b-bd0e-4881-9dd8-3f7c073d4688
  name: Comprehensions
  description: |+

    1. Use a list comprehension to capitalise every element in the list `['Hello', 'world']`
    2. Use a list comprehension to filter out every multiple of 5 from a range of numbers up to 100
    3. Use a dictionary comprehension to create a map between every integer up to 15 and it's value squared
    4. Now, use a dictionary comprehension to create a dictionary that does the inverse! (hint: iterate over `squares.items()`, where squares is the name of the dict you made in the above challenge)
    5. Create a list of dictionaries, each with a key called `name`, then use a list comprehension to map that list to the names themselves by indexing the dictionaries
    6. Use the `os` module to create a nested list comprehension to list every file in the `my_lib` directory

- id: 88c74ef8-676e-45af-a3fc-c849ede91107
  name: Simple Typed Function
  description: |+
    Create a function that takes in a list of words and returns the total number of characters in the list, then define the type the function's inputs and outputs
