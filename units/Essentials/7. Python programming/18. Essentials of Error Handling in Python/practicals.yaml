- id: 87d56c30-1e2a-473c-b932-7f904ec67c65
  name: Try-Except
  description: |+
    Create a script to handle expected errors raised when a file is not found

    1. Create a new file called `try_except.py`
    2. In `try_except.py`, create a try-except block that tries to open a file called `test.txt`
    3. In the `try` block, print the contents of the file. Use a context manager to open the file.
    4. In the `except` block, print "File not found" and then create a file called `test.txt` and write "Hello, I am a file!" to it. Use a context manager to do this.
    5. Run `try_except.py` once. You should see the message "File not found" and then a file called `test.txt` in your directory.
    6. Run the file again, and you should see the contents of the file printed to the console
    7. Add a `print` statement to the `except` block that prints the exception that is raised
    8. Before running `try_except.py`, if you have a file called `test.txt` in your directory, delete it
    9. Then run `try_except.py`. You should see the message corresponding to the error that is raised.


- id: abd9448e-e006-452a-b5ac-adf0cd4ce2cd
  name: Try-Except with Multiple Exceptions
  description: |+
    Create a script to handle exceptions differently depending on the type of error

    1. Download the [file](https://aicoreassessments.s3.amazonaws.com/try_except_multiple.py) called `try_except_multiple.py`
    2. In `try_except_multiple.py`, you already have a try-except block that asks the user for two numbers, then casts them to integers and divides them
    3. If the user enters a string, the code will raise a `ValueError`. Add an except block that catches this error and prints "You must enter a number".
    4. If the user enters a zero for the second number, the code will raise a `ZeroDivisionError`. Add an except block that catches this error and prints "You cannot divide by zero".
    5. If, when asked for a number, the user presses Ctrl+C (or Cmd+C on a Mac), the code will raise a `KeyboardInterrupt`. Add an except block that catches this error and prints "You pressed Ctrl+C".
    6. Run `try_except_multiple.py` and try entering different inputs. You should see the correct error message printed for each error
    7. Add an `else` block after the `try-except` block. Inside it print "No errors were raised", and then print the result of the division.
    8. Run `try_except_multiple.py` and try entering different inputs. You should see the correct error message printed for each error, and "No errors were raised" printed if no errors are raised.
    9. Add a while loop to iteratively ask the user for two numbers until they enter a valid input
